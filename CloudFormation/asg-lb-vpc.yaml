AWSTemplateFormatVersion: 2010-09-09

Metadata:
 AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "General Configuration"
        Parameters: 
          - Environment
          - InstanceName
          - InstanceType
      -
        Label:
          default: "VPC and Subnets CIDR Blocks"
        Parameters:
          - VPCBlock
          - PublicSubnetACIDR
          - PublicSubnetBCIDR
          - PublicSubnetCCIDR
      - 
        Label: 
          default: "SSH key"
        Parameters: 
          - SSHKeyName


Parameters:

  Environment:
    Type: String
    Default: "PROD"

  InstanceName:
    Description: Logical instance name seen in AWS console
    Type: String
    Default: ASG-Tomcat-Hello-World

  InstanceType:
    Description: Type of EC2 instance to launch
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro

  VPCBlock:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: '10.0.0.0/16'  

  PublicSubnetACIDR: 
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: '10.0.10.0/24'
    Description: "Public Subnet-A CIDR"

  PublicSubnetBCIDR: 
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: '10.0.20.0/24'
    Description: "Public Subnet-B CIDR"

  PublicSubnetCCIDR: 
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: '10.0.30.0/24'
    Description: "Public Subnet-C CIDR"

  SSHKeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: aws-test-oregon
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Mappings:
  RegionMap:
    eu-west-3:
      AMI: ami-0ebb3a801d5fb8b9b

Resources:
#==================================================== VPC =========	  
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref VPCBlock
      Tags:
        - Key: Name
          Value: !Ref Environment

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: 
      Tags:
        - Key: Name
          Value: !Ref Environment

  GatewayAttachmentInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

#==================================================== Public Subnet =========	  
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetACIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-A" ] ]

  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetBCIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-B" ] ]

  PublicSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetCCIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-C" ] ]

#====== Public RouteTables =========	  
  PublicRouteTables:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PublicRouteTables" ] ]

#======= Routes for Public Subnet RouteTables with IGW 
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTables
      GatewayId: !Ref InternetGateway
    DependsOn:
      - GatewayAttachmentInternet

#====== Associate Public Route for Public Subnets
  RouteAssociationPublicSubnetA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTables
      SubnetId: !Ref PublicSubnetA
  RouteAssociationPublicSubnetB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTables
      SubnetId: !Ref PublicSubnetB
  RouteAssociationPublicSubnetC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTables
      SubnetId: !Ref PublicSubnetC

#========================= AutoScalingGroup
  ASGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: [ !Ref PublicSubnetA, !Ref PublicSubnetB, !Ref PublicSubnetC ]
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '3'
      LoadBalancerNames:
        - !Ref ElasticLoadBalancer
      Tags:
        - Key: Name
          Value: !Ref InstanceName
          PropagateAtLaunch: 'true'

#========================= Instance Configuration (LaunchConfiguration) 
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      UserData: 
        Fn::Base64: 
          !Sub | 
            #!/bin/bash -xe 
            sudo -i 
            yum -y update
            yum-config-manager --enable rhui-REGION-rhel-server-extras
            yum -y install docker git httpd
            PrivatIP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`
            echo "Web Server with $PrivatIP" > /var/www/html/index.html
            systemctl start docker
            systemctl start httpd
            systemctl enable docker
            systemctl enable httpd
            mkdir /root/git
            cd /root/git
            git clone --single-branch --branch develop https://github.com/KostivAndrii/hello-world-servlet.git
            cd /root/git/hello-world-servlet/docker
            sed -i "s/zabbix_client_ipv4/$PrivatIP/" setenv.sh
            sed -i "s/tomcat_admin_username/admin/" tomcat-users.xml
            sed -i "s/tomcat_admin_password/password/" tomcat-users.xml
            docker run -p 8080:8080 -v $(pwd)/hello-world.war:/usr/local/tomcat/webapps/hello-world.war -v $(pwd)/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml -v $(pwd)/context.xml:/usr/local/tomcat/webapps/manager/META-INF/context.xml tomcat:latest
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKeyName

#========================= AutoScaling Policy Up/Down
  WebServerScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASGroup
      Cooldown: '300'
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASGroup
      Cooldown: '300'
      ScalingAdjustment: '-1'

#========================= High Alarm
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 5 minutes (300 sec)
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '80'
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASGroup
      ComparisonOperator: GreaterThanThreshold

#========================= Low Alarm
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU <20% for 5 min (300 sec)
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '20'
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASGroup
      ComparisonOperator: LessThanThreshold

#========================= LoadBalancer
  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Subnets: [ !Ref PublicSubnetA, !Ref PublicSubnetB, !Ref PublicSubnetC ]
      SecurityGroups:
        - !Ref LBSecurityGroup
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
        - LoadBalancerPort: '8080'
          InstancePort: '8080'
          Protocol: HTTP
      HealthCheck:
        Target: !Join 
          - ''
          - - 'HTTP:'
            - '8080'
            - /hello-world/
        HealthyThreshold: '10'
        UnhealthyThreshold: '5'
        Interval: '20'
        Timeout: '10'

#========================= LBSecurityGroup
  LBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on the inbound ports 80 and 8080
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

#========================= InstanceSecurityGroup
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

Outputs:
  URL:
    Description: The URL of the website
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt 
          - ElasticLoadBalancer
          - DNSName
  URL8080:
    Description: The URL of the website
    Value: !Join ['', [ 'http://', !GetAtt [ElasticLoadBalancer, DNSName], ':8080' ] ]
  URL8008HW:
    Description: The URL of the website
    Value: !Join ['', [ 'http://', !GetAtt [ElasticLoadBalancer, DNSName], ':8080/hello-world/' ] ]
